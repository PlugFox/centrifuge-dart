// Mocks generated by Mockito 5.4.5 from annotations
// in spinify/test/unit/spinify_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:spinify/src/model/transport_interface.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [WebSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocket extends _i1.Mock implements _i2.WebSocket {
  @override
  _i3.Stream<List<int>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(#add, [data]),
        returnValueForMissingStub: null,
      );

  @override
  void close([int? code, String? reason]) => super.noSuchMethod(
        Invocation.method(#close, [code, reason]),
        returnValueForMissingStub: null,
      );
}
